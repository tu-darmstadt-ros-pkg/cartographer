// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/2d/gnc_2d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/2d/gnc_2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {
class GncOptions2DDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GncOptions2D>
     _instance;
} _GncOptions2D_default_instance_;

namespace protobuf_cartographer_2fmapping_2fproto_2f2d_2fgnc_5f2d_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GncOptions2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GncOptions2D, use_gnc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GncOptions2D, max_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GncOptions2D, non_convexity_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GncOptions2D, gm_shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GncOptions2D, min_convexity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GncOptions2D, non_convexity_inc_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GncOptions2D, max_retries_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(GncOptions2D)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GncOptions2D_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/2d/gnc_2d.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _GncOptions2D_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GncOptions2D_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n*cartographer/mapping/proto/2d/gnc_2d.p"
      "roto\022\032cartographer.mapping.proto\"\263\001\n\014Gnc"
      "Options2D\022\017\n\007use_gnc\030\001 \001(\010\022\026\n\016max_iterat"
      "ions\030\002 \001(\005\022\032\n\022non_convexity_stop\030\003 \001(\001\022\020"
      "\n\010gm_shape\030\004 \001(\001\022\025\n\rmin_convexity\030\005 \001(\001\022"
      " \n\030non_convexity_inc_factor\030\006 \001(\001\022\023\n\013max"
      "_retries\030\007 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 262);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/2d/gnc_2d.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_2fproto_2f2d_2fgnc_5f2d_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GncOptions2D::kUseGncFieldNumber;
const int GncOptions2D::kMaxIterationsFieldNumber;
const int GncOptions2D::kNonConvexityStopFieldNumber;
const int GncOptions2D::kGmShapeFieldNumber;
const int GncOptions2D::kMinConvexityFieldNumber;
const int GncOptions2D::kNonConvexityIncFactorFieldNumber;
const int GncOptions2D::kMaxRetriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GncOptions2D::GncOptions2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2f2d_2fgnc_5f2d_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.GncOptions2D)
}
GncOptions2D::GncOptions2D(const GncOptions2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_gnc_, &from.use_gnc_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_retries_) -
    reinterpret_cast<char*>(&use_gnc_)) + sizeof(max_retries_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.GncOptions2D)
}

void GncOptions2D::SharedCtor() {
  ::memset(&use_gnc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_retries_) -
      reinterpret_cast<char*>(&use_gnc_)) + sizeof(max_retries_));
  _cached_size_ = 0;
}

GncOptions2D::~GncOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.GncOptions2D)
  SharedDtor();
}

void GncOptions2D::SharedDtor() {
}

void GncOptions2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GncOptions2D::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2f2d_2fgnc_5f2d_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2f2d_2fgnc_5f2d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GncOptions2D& GncOptions2D::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2f2d_2fgnc_5f2d_2eproto::InitDefaults();
  return *internal_default_instance();
}

GncOptions2D* GncOptions2D::New(::google::protobuf::Arena* arena) const {
  GncOptions2D* n = new GncOptions2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GncOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.GncOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&use_gnc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_retries_) -
      reinterpret_cast<char*>(&use_gnc_)) + sizeof(max_retries_));
  _internal_metadata_.Clear();
}

bool GncOptions2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.GncOptions2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool use_gnc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_gnc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_iterations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double non_convexity_stop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &non_convexity_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gm_shape = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gm_shape_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min_convexity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_convexity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double non_convexity_inc_factor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &non_convexity_inc_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_retries = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_retries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.GncOptions2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.GncOptions2D)
  return false;
#undef DO_
}

void GncOptions2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.GncOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_gnc = 1;
  if (this->use_gnc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_gnc(), output);
  }

  // int32 max_iterations = 2;
  if (this->max_iterations() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_iterations(), output);
  }

  // double non_convexity_stop = 3;
  if (this->non_convexity_stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->non_convexity_stop(), output);
  }

  // double gm_shape = 4;
  if (this->gm_shape() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gm_shape(), output);
  }

  // double min_convexity = 5;
  if (this->min_convexity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_convexity(), output);
  }

  // double non_convexity_inc_factor = 6;
  if (this->non_convexity_inc_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->non_convexity_inc_factor(), output);
  }

  // int32 max_retries = 7;
  if (this->max_retries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_retries(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.GncOptions2D)
}

::google::protobuf::uint8* GncOptions2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.GncOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_gnc = 1;
  if (this->use_gnc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_gnc(), target);
  }

  // int32 max_iterations = 2;
  if (this->max_iterations() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_iterations(), target);
  }

  // double non_convexity_stop = 3;
  if (this->non_convexity_stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->non_convexity_stop(), target);
  }

  // double gm_shape = 4;
  if (this->gm_shape() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gm_shape(), target);
  }

  // double min_convexity = 5;
  if (this->min_convexity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_convexity(), target);
  }

  // double non_convexity_inc_factor = 6;
  if (this->non_convexity_inc_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->non_convexity_inc_factor(), target);
  }

  // int32 max_retries = 7;
  if (this->max_retries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_retries(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.GncOptions2D)
  return target;
}

size_t GncOptions2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.GncOptions2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool use_gnc = 1;
  if (this->use_gnc() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_iterations = 2;
  if (this->max_iterations() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_iterations());
  }

  // double non_convexity_stop = 3;
  if (this->non_convexity_stop() != 0) {
    total_size += 1 + 8;
  }

  // double gm_shape = 4;
  if (this->gm_shape() != 0) {
    total_size += 1 + 8;
  }

  // double min_convexity = 5;
  if (this->min_convexity() != 0) {
    total_size += 1 + 8;
  }

  // double non_convexity_inc_factor = 6;
  if (this->non_convexity_inc_factor() != 0) {
    total_size += 1 + 8;
  }

  // int32 max_retries = 7;
  if (this->max_retries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_retries());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GncOptions2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.GncOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  const GncOptions2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GncOptions2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.GncOptions2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.GncOptions2D)
    MergeFrom(*source);
  }
}

void GncOptions2D::MergeFrom(const GncOptions2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.GncOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.use_gnc() != 0) {
    set_use_gnc(from.use_gnc());
  }
  if (from.max_iterations() != 0) {
    set_max_iterations(from.max_iterations());
  }
  if (from.non_convexity_stop() != 0) {
    set_non_convexity_stop(from.non_convexity_stop());
  }
  if (from.gm_shape() != 0) {
    set_gm_shape(from.gm_shape());
  }
  if (from.min_convexity() != 0) {
    set_min_convexity(from.min_convexity());
  }
  if (from.non_convexity_inc_factor() != 0) {
    set_non_convexity_inc_factor(from.non_convexity_inc_factor());
  }
  if (from.max_retries() != 0) {
    set_max_retries(from.max_retries());
  }
}

void GncOptions2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.GncOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GncOptions2D::CopyFrom(const GncOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.GncOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GncOptions2D::IsInitialized() const {
  return true;
}

void GncOptions2D::Swap(GncOptions2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GncOptions2D::InternalSwap(GncOptions2D* other) {
  using std::swap;
  swap(use_gnc_, other->use_gnc_);
  swap(max_iterations_, other->max_iterations_);
  swap(non_convexity_stop_, other->non_convexity_stop_);
  swap(gm_shape_, other->gm_shape_);
  swap(min_convexity_, other->min_convexity_);
  swap(non_convexity_inc_factor_, other->non_convexity_inc_factor_);
  swap(max_retries_, other->max_retries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GncOptions2D::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2f2d_2fgnc_5f2d_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2f2d_2fgnc_5f2d_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GncOptions2D

// bool use_gnc = 1;
void GncOptions2D::clear_use_gnc() {
  use_gnc_ = false;
}
bool GncOptions2D::use_gnc() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GncOptions2D.use_gnc)
  return use_gnc_;
}
void GncOptions2D::set_use_gnc(bool value) {
  
  use_gnc_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GncOptions2D.use_gnc)
}

// int32 max_iterations = 2;
void GncOptions2D::clear_max_iterations() {
  max_iterations_ = 0;
}
::google::protobuf::int32 GncOptions2D::max_iterations() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GncOptions2D.max_iterations)
  return max_iterations_;
}
void GncOptions2D::set_max_iterations(::google::protobuf::int32 value) {
  
  max_iterations_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GncOptions2D.max_iterations)
}

// double non_convexity_stop = 3;
void GncOptions2D::clear_non_convexity_stop() {
  non_convexity_stop_ = 0;
}
double GncOptions2D::non_convexity_stop() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GncOptions2D.non_convexity_stop)
  return non_convexity_stop_;
}
void GncOptions2D::set_non_convexity_stop(double value) {
  
  non_convexity_stop_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GncOptions2D.non_convexity_stop)
}

// double gm_shape = 4;
void GncOptions2D::clear_gm_shape() {
  gm_shape_ = 0;
}
double GncOptions2D::gm_shape() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GncOptions2D.gm_shape)
  return gm_shape_;
}
void GncOptions2D::set_gm_shape(double value) {
  
  gm_shape_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GncOptions2D.gm_shape)
}

// double min_convexity = 5;
void GncOptions2D::clear_min_convexity() {
  min_convexity_ = 0;
}
double GncOptions2D::min_convexity() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GncOptions2D.min_convexity)
  return min_convexity_;
}
void GncOptions2D::set_min_convexity(double value) {
  
  min_convexity_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GncOptions2D.min_convexity)
}

// double non_convexity_inc_factor = 6;
void GncOptions2D::clear_non_convexity_inc_factor() {
  non_convexity_inc_factor_ = 0;
}
double GncOptions2D::non_convexity_inc_factor() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GncOptions2D.non_convexity_inc_factor)
  return non_convexity_inc_factor_;
}
void GncOptions2D::set_non_convexity_inc_factor(double value) {
  
  non_convexity_inc_factor_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GncOptions2D.non_convexity_inc_factor)
}

// int32 max_retries = 7;
void GncOptions2D::clear_max_retries() {
  max_retries_ = 0;
}
::google::protobuf::int32 GncOptions2D::max_retries() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GncOptions2D.max_retries)
  return max_retries_;
}
void GncOptions2D::set_max_retries(::google::protobuf::int32 value) {
  
  max_retries_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GncOptions2D.max_retries)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
