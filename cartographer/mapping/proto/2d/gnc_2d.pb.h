// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/2d/gnc_2d.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2f2d_2fgnc_5f2d_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2f2d_2fgnc_5f2d_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace mapping {
namespace proto {
class GncOptions2D;
class GncOptions2DDefaultTypeInternal;
extern GncOptions2DDefaultTypeInternal _GncOptions2D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

namespace cartographer {
namespace mapping {
namespace proto {

namespace protobuf_cartographer_2fmapping_2fproto_2f2d_2fgnc_5f2d_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cartographer_2fmapping_2fproto_2f2d_2fgnc_5f2d_2eproto

// ===================================================================

class GncOptions2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.GncOptions2D) */ {
 public:
  GncOptions2D();
  virtual ~GncOptions2D();

  GncOptions2D(const GncOptions2D& from);

  inline GncOptions2D& operator=(const GncOptions2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GncOptions2D(GncOptions2D&& from) noexcept
    : GncOptions2D() {
    *this = ::std::move(from);
  }

  inline GncOptions2D& operator=(GncOptions2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GncOptions2D& default_instance();

  static inline const GncOptions2D* internal_default_instance() {
    return reinterpret_cast<const GncOptions2D*>(
               &_GncOptions2D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GncOptions2D* other);
  friend void swap(GncOptions2D& a, GncOptions2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GncOptions2D* New() const PROTOBUF_FINAL { return New(NULL); }

  GncOptions2D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GncOptions2D& from);
  void MergeFrom(const GncOptions2D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GncOptions2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool use_gnc = 1;
  void clear_use_gnc();
  static const int kUseGncFieldNumber = 1;
  bool use_gnc() const;
  void set_use_gnc(bool value);

  // int32 max_iterations = 2;
  void clear_max_iterations();
  static const int kMaxIterationsFieldNumber = 2;
  ::google::protobuf::int32 max_iterations() const;
  void set_max_iterations(::google::protobuf::int32 value);

  // double non_convexity_stop = 3;
  void clear_non_convexity_stop();
  static const int kNonConvexityStopFieldNumber = 3;
  double non_convexity_stop() const;
  void set_non_convexity_stop(double value);

  // double gm_shape = 4;
  void clear_gm_shape();
  static const int kGmShapeFieldNumber = 4;
  double gm_shape() const;
  void set_gm_shape(double value);

  // double min_convexity = 5;
  void clear_min_convexity();
  static const int kMinConvexityFieldNumber = 5;
  double min_convexity() const;
  void set_min_convexity(double value);

  // double non_convexity_inc_factor = 6;
  void clear_non_convexity_inc_factor();
  static const int kNonConvexityIncFactorFieldNumber = 6;
  double non_convexity_inc_factor() const;
  void set_non_convexity_inc_factor(double value);

  // int32 max_retries = 7;
  void clear_max_retries();
  static const int kMaxRetriesFieldNumber = 7;
  ::google::protobuf::int32 max_retries() const;
  void set_max_retries(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.GncOptions2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool use_gnc_;
  ::google::protobuf::int32 max_iterations_;
  double non_convexity_stop_;
  double gm_shape_;
  double min_convexity_;
  double non_convexity_inc_factor_;
  ::google::protobuf::int32 max_retries_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2f2d_2fgnc_5f2d_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GncOptions2D

// bool use_gnc = 1;
inline void GncOptions2D::clear_use_gnc() {
  use_gnc_ = false;
}
inline bool GncOptions2D::use_gnc() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GncOptions2D.use_gnc)
  return use_gnc_;
}
inline void GncOptions2D::set_use_gnc(bool value) {
  
  use_gnc_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GncOptions2D.use_gnc)
}

// int32 max_iterations = 2;
inline void GncOptions2D::clear_max_iterations() {
  max_iterations_ = 0;
}
inline ::google::protobuf::int32 GncOptions2D::max_iterations() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GncOptions2D.max_iterations)
  return max_iterations_;
}
inline void GncOptions2D::set_max_iterations(::google::protobuf::int32 value) {
  
  max_iterations_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GncOptions2D.max_iterations)
}

// double non_convexity_stop = 3;
inline void GncOptions2D::clear_non_convexity_stop() {
  non_convexity_stop_ = 0;
}
inline double GncOptions2D::non_convexity_stop() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GncOptions2D.non_convexity_stop)
  return non_convexity_stop_;
}
inline void GncOptions2D::set_non_convexity_stop(double value) {
  
  non_convexity_stop_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GncOptions2D.non_convexity_stop)
}

// double gm_shape = 4;
inline void GncOptions2D::clear_gm_shape() {
  gm_shape_ = 0;
}
inline double GncOptions2D::gm_shape() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GncOptions2D.gm_shape)
  return gm_shape_;
}
inline void GncOptions2D::set_gm_shape(double value) {
  
  gm_shape_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GncOptions2D.gm_shape)
}

// double min_convexity = 5;
inline void GncOptions2D::clear_min_convexity() {
  min_convexity_ = 0;
}
inline double GncOptions2D::min_convexity() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GncOptions2D.min_convexity)
  return min_convexity_;
}
inline void GncOptions2D::set_min_convexity(double value) {
  
  min_convexity_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GncOptions2D.min_convexity)
}

// double non_convexity_inc_factor = 6;
inline void GncOptions2D::clear_non_convexity_inc_factor() {
  non_convexity_inc_factor_ = 0;
}
inline double GncOptions2D::non_convexity_inc_factor() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GncOptions2D.non_convexity_inc_factor)
  return non_convexity_inc_factor_;
}
inline void GncOptions2D::set_non_convexity_inc_factor(double value) {
  
  non_convexity_inc_factor_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GncOptions2D.non_convexity_inc_factor)
}

// int32 max_retries = 7;
inline void GncOptions2D::clear_max_retries() {
  max_retries_ = 0;
}
inline ::google::protobuf::int32 GncOptions2D::max_retries() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GncOptions2D.max_retries)
  return max_retries_;
}
inline void GncOptions2D::set_max_retries(::google::protobuf::int32 value) {
  
  max_retries_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GncOptions2D.max_retries)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2f2d_2fgnc_5f2d_2eproto__INCLUDED
